{
  // Place your snippetbox workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Invoke another template in a go template": {
    "scope": "html,gotmpl",
    "prefix": "templ",
    "body": ["{{template \"${1:template_name}\" .}}$0"]
  },
  "Invoke a template using a block in a go template": {
    "scope": "html,gotmpl",
    "prefix": "tempblk",
    "body": ["{{block \"${1:template_name}\" .}}$0{{end}}"]
  },
  "Invoke a template using a block in a go template": {
    "scope": "html,gotmpl",
    "prefix": "with",
    "body": ["{{with .${1:Name}}}", "$0", "{{end}}"]
  },
  "Insert a template directive": {
    "scope": "html,gotmpl",
    "prefix": "v",
    "body": ["{{$1}}$0"]
  },
  "Define a go method (fn with receiver arg)": {
    "scope": "go",
    "prefix": "meth",
    "body": [
      "func (${1:name} ${2:*Type}) ${3:fnName}(${4:args}) ${5:return} {",
      "  $0",
      "}"
    ]
  },
  "Handle a possible error": {
    "scope": "go",
    "prefix": "herr",
    "body": ["if err != nil {", "  $1", "}$0"]
  },
  "Define a middleware function": {
    "scope": "go",
    "prefix": "middleware",
    "body": [
      "func (app *application) ${1:funcName}(next http.Handler) http.Handler {",
      "  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {"
      "    $0",
      "",
      "    next.ServeHTTP(w, r)",
      "  })",
      "}"
    ]
  }
}
